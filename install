#!/bin/bash
#
# HiveMatrix Module Installer (CLI)
# Usage: ./install <module_name>
# Example: ./install ledger
#
# Supported modules: codex, ledger, knowledgetree, brainhair
#

set -e  # Exit on error

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

# Script directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PARENT_DIR="$(dirname "$SCRIPT_DIR")"

# Get the real user (not root) if running via sudo
if [ -n "$SUDO_USER" ]; then
    REAL_USER="$SUDO_USER"
    REAL_UID=$(id -u "$SUDO_USER")
    REAL_GID=$(id -g "$SUDO_USER")
else
    REAL_USER="$USER"
    REAL_UID=$(id -u)
    REAL_GID=$(id -g)
fi

# Function to run commands as the real user
run_as_user() {
    if [ -n "$SUDO_USER" ]; then
        sudo -u "$SUDO_USER" "$@"
    else
        "$@"
    fi
}

# Function to fix ownership of a path
fix_ownership() {
    if [ -n "$SUDO_USER" ]; then
        chown -R "$REAL_UID:$REAL_GID" "$1"
    fi
}

# Usage message
usage() {
    echo -e "${BLUE}Usage: $0 <module_name>${NC}"
    echo ""
    echo "Supported modules:"
    echo "  - codex          : Client/Asset/Ticket management (PostgreSQL)"
    echo "  - ledger         : Billing and invoicing (PostgreSQL)"
    echo "  - knowledgetree  : Knowledge graph and support context (Neo4j)"
    echo "  - brainhair      : Helpdesk/ticketing (PostgreSQL)"
    echo ""
    echo "Example:"
    echo "  $0 ledger"
    echo ""
    exit 1
}

# Check arguments
if [ $# -eq 0 ]; then
    usage
fi

MODULE_NAME="$1"

# Validate module name
case "$MODULE_NAME" in
    codex|ledger|knowledgetree|brainhair)
        ;;
    *)
        echo -e "${RED}Error: Unknown module '$MODULE_NAME'${NC}"
        echo ""
        usage
        ;;
esac

echo -e "${BLUE}=========================================="
echo "  Installing HiveMatrix Module: $MODULE_NAME"
echo "==========================================${NC}"
echo ""

# Clone or update the repository (as the real user, not root)
MODULE_DIR="$PARENT_DIR/hivematrix-$MODULE_NAME"
GIT_URL="https://github.com/ruapotato/hivematrix-$MODULE_NAME"

if [ -d "$MODULE_DIR" ]; then
    echo -e "${YELLOW}Module directory already exists: $MODULE_DIR${NC}"
    echo -e "${YELLOW}Updating from git...${NC}"
    run_as_user git -C "$MODULE_DIR" pull || echo -e "${RED}Warning: Failed to update from git${NC}"
else
    echo -e "${YELLOW}Cloning $MODULE_NAME from $GIT_URL...${NC}"
    run_as_user git clone "$GIT_URL" "$MODULE_DIR"
fi

cd "$MODULE_DIR"

# Ensure proper ownership
fix_ownership "$MODULE_DIR"

echo -e "${GREEN}✓ Repository ready${NC}"
echo ""

# Create virtual environment and install dependencies (as real user)
echo -e "${YELLOW}Setting up Python virtual environment...${NC}"
if [ ! -d "pyenv" ]; then
    run_as_user python3 -m venv pyenv
    echo -e "${GREEN}✓ Virtual environment created${NC}"
else
    echo "  Virtual environment already exists"
fi

# Run pip operations as the real user
run_as_user bash -c "source pyenv/bin/activate && pip install --upgrade pip > /dev/null 2>&1"
echo -e "${GREEN}✓ pip upgraded${NC}"

if [ -f "requirements.txt" ]; then
    echo -e "${YELLOW}Installing Python dependencies...${NC}"
    run_as_user bash -c "source pyenv/bin/activate && pip install -r requirements.txt"
    echo -e "${GREEN}✓ Dependencies installed${NC}"
fi
echo ""

# Create instance directory (as real user)
if [ ! -d "instance" ]; then
    run_as_user mkdir -p instance
    echo -e "${GREEN}✓ Instance directory created${NC}"
fi

# Create minimal .flaskenv (as real user)
if [ ! -f ".flaskenv" ]; then
    echo -e "${YELLOW}Creating minimal .flaskenv...${NC}"
    run_as_user bash -c "cat > .flaskenv <<EOF
FLASK_APP=run.py
FLASK_ENV=development
SERVICE_NAME=$MODULE_NAME
CORE_SERVICE_URL=http://localhost:5000
HELM_SERVICE_URL=http://localhost:5004
EOF"
    echo -e "${GREEN}✓ Minimal .flaskenv created${NC}"
fi

# Symlink services.json from Helm (as real user)
if [ -f "$SCRIPT_DIR/services.json" ]; then
    run_as_user ln -sf ../hivematrix-helm/services.json services.json 2>/dev/null || true
fi

# Ensure all files are owned by the real user
fix_ownership "$MODULE_DIR"

# Database setup based on module type
echo ""
echo -e "${BLUE}=========================================="
echo "  Database Configuration"
echo "==========================================${NC}"
echo ""

case "$MODULE_NAME" in
    codex|ledger|brainhair)
        # PostgreSQL-based modules
        DB_NAME="${MODULE_NAME}_db"
        DB_USER="${MODULE_NAME}_user"

        # Check if PostgreSQL is installed
        if ! command -v psql &> /dev/null; then
            echo -e "${RED}✗ PostgreSQL is not installed${NC}"
            echo ""
            echo "Please install PostgreSQL first:"
            echo "  sudo apt update"
            echo "  sudo apt install -y postgresql postgresql-contrib"
            echo ""
            exit 1
        fi

        echo -e "${YELLOW}PostgreSQL database setup for $MODULE_NAME${NC}"
        echo ""

        # Prompt for database password
        echo -e "${BLUE}Enter a password for the database user '${DB_USER}':${NC}"
        read -s -p "Password: " DB_PASSWORD
        echo ""
        read -s -p "Confirm password: " DB_PASSWORD_CONFIRM
        echo ""

        if [ "$DB_PASSWORD" != "$DB_PASSWORD_CONFIRM" ]; then
            echo -e "${RED}✗ Passwords do not match${NC}"
            exit 1
        fi

        if [ -z "$DB_PASSWORD" ]; then
            echo -e "${RED}✗ Password cannot be empty${NC}"
            exit 1
        fi

        echo ""
        echo -e "${YELLOW}Checking if database exists...${NC}"

        # Check if database exists
        DB_EXISTS=$(sudo -u postgres psql -tAc "SELECT 1 FROM pg_database WHERE datname='$DB_NAME'" 2>/dev/null || echo "0")

        if [ "$DB_EXISTS" == "1" ]; then
            echo -e "${YELLOW}Database '$DB_NAME' already exists.${NC}"
            echo ""
            echo "What would you like to do?"
            echo "  1) Use existing database (keep tables and data)"
            echo "  2) Drop and recreate database (WARNING: destroys all data)"
            echo "  3) Cancel installation"
            echo ""
            read -p "Enter choice [1-3]: " DB_CHOICE

            case "$DB_CHOICE" in
                1)
                    echo -e "${GREEN}Using existing database${NC}"
                    RECREATE_DB=false
                    ;;
                2)
                    echo -e "${RED}Dropping existing database...${NC}"
                    sudo -u postgres psql -c "DROP DATABASE IF EXISTS $DB_NAME;"
                    RECREATE_DB=true
                    ;;
                3)
                    echo "Installation cancelled"
                    exit 0
                    ;;
                *)
                    echo -e "${RED}Invalid choice${NC}"
                    exit 1
                    ;;
            esac
        else
            RECREATE_DB=true
        fi

        if [ "$RECREATE_DB" == "true" ]; then
            echo -e "${YELLOW}Creating PostgreSQL database and user...${NC}"

            # Create user
            sudo -u postgres psql -c "DROP USER IF EXISTS $DB_USER;" 2>/dev/null || true
            sudo -u postgres psql -c "CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';"

            # Create database
            sudo -u postgres psql -c "CREATE DATABASE $DB_NAME OWNER $DB_USER;"

            # Grant privileges
            sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;"

            echo -e "${GREEN}✓ Database created${NC}"
        fi

        echo ""
        echo -e "${YELLOW}Running init_db.py to setup database schema...${NC}"
        echo ""

        # Run init_db.py with headless options (as real user)
        export PGPASSWORD="$DB_PASSWORD"

        if [ "$RECREATE_DB" == "true" ]; then
            # New database - run in non-interactive mode
            # Add --create-sample-data only for modules that support it
            if [ "$MODULE_NAME" == "codex" ] || [ "$MODULE_NAME" == "ledger" ]; then
                run_as_user bash -c "cd '$MODULE_DIR' && source pyenv/bin/activate && python init_db.py --headless \
                    --db-host localhost \
                    --db-port 5432 \
                    --db-name '$DB_NAME' \
                    --db-user '$DB_USER' \
                    --db-password '$DB_PASSWORD' \
                    --create-sample-data"
            else
                run_as_user bash -c "cd '$MODULE_DIR' && source pyenv/bin/activate && python init_db.py --headless \
                    --db-host localhost \
                    --db-port 5432 \
                    --db-name '$DB_NAME' \
                    --db-user '$DB_USER' \
                    --db-password '$DB_PASSWORD'"
            fi
        else
            # Existing database - run migration only
            run_as_user bash -c "cd '$MODULE_DIR' && source pyenv/bin/activate && python init_db.py --headless \
                --db-host localhost \
                --db-port 5432 \
                --db-name '$DB_NAME' \
                --db-user '$DB_USER' \
                --db-password '$DB_PASSWORD' \
                --migrate-only"
        fi

        unset PGPASSWORD

        echo ""
        echo -e "${GREEN}✓ Database setup complete${NC}"
        ;;

    knowledgetree)
        # Neo4j-based module
        echo -e "${YELLOW}Neo4j database setup for $MODULE_NAME${NC}"
        echo ""

        # Check if Neo4j is running
        if ! command -v neo4j &> /dev/null && ! nc -z localhost 7687 2>/dev/null; then
            echo -e "${YELLOW}⚠ Neo4j doesn't appear to be installed or running${NC}"
            echo ""
            echo "KnowledgeTree requires Neo4j to be running."
            echo "Install Neo4j: https://neo4j.com/download/"
            echo ""
            echo "After installing Neo4j:"
            echo "  1. Start Neo4j: sudo systemctl start neo4j"
            echo "  2. Set initial password: neo4j-admin set-initial-password <password>"
            echo "  3. Re-run this installer"
            echo ""
            read -p "Continue anyway? (y/n): " CONTINUE
            if [ "$CONTINUE" != "y" ]; then
                exit 1
            fi
        fi

        echo -e "${BLUE}Enter Neo4j connection details:${NC}"

        # Use defaults or prompt
        NEO4J_URI="bolt://localhost:7687"
        NEO4J_USER="neo4j"

        echo "Neo4j URI: $NEO4J_URI"
        echo "Neo4j User: $NEO4J_USER"
        echo ""

        read -s -p "Neo4j Password: " NEO4J_PASSWORD
        echo ""
        read -s -p "Confirm password: " NEO4J_PASSWORD_CONFIRM
        echo ""

        if [ "$NEO4J_PASSWORD" != "$NEO4J_PASSWORD_CONFIRM" ]; then
            echo -e "${RED}✗ Passwords do not match${NC}"
            exit 1
        fi

        if [ -z "$NEO4J_PASSWORD" ]; then
            echo -e "${RED}✗ Password cannot be empty${NC}"
            exit 1
        fi

        echo ""
        echo -e "${YELLOW}Running init_db.py to setup Neo4j...${NC}"
        echo ""

        run_as_user bash -c "cd '$MODULE_DIR' && source pyenv/bin/activate && python init_db.py --headless \
            --neo4j-uri '$NEO4J_URI' \
            --neo4j-user '$NEO4J_USER' \
            --neo4j-password '$NEO4J_PASSWORD'"

        echo ""
        echo -e "${GREEN}✓ Neo4j setup complete${NC}"
        ;;
esac

echo ""
echo -e "${BLUE}=========================================="
echo -e "${GREEN}  ✓ $MODULE_NAME Installation Complete!${NC}"
echo -e "${BLUE}==========================================${NC}"
echo ""
echo "Next steps:"
echo "  1. Start Helm if not already running:"
echo "     cd $SCRIPT_DIR && ./start.sh"
echo ""
echo "  2. The module will be automatically detected and started"
echo ""
echo "  3. Access the module via Helm dashboard:"
echo "     http://localhost:5004"
echo ""

# Update Helm's services.json
if [ -f "$SCRIPT_DIR/install_manager.py" ]; then
    echo -e "${YELLOW}Updating Helm services registry...${NC}"
    cd "$SCRIPT_DIR"
    python3 install_manager.py update-config
    echo -e "${GREEN}✓ Services registry updated${NC}"
    echo ""
fi

exit 0
