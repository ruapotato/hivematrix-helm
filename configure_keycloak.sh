#!/bin/bash
#
# Configure Keycloak for HiveMatrix
# Automatically creates realm, client, and admin user
#

set -e

# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PARENT_DIR="$(dirname "$SCRIPT_DIR")"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

KEYCLOAK_URL="http://localhost:8080"
ADMIN_USER="admin"
ADMIN_PASS="admin"

# Configure Keycloak for proxy mode first
echo ""
echo "================================================================"
echo "  Configuring Keycloak for Proxy Mode"
echo "================================================================"
echo ""

KEYCLOAK_CONF_FILE="$PARENT_DIR/keycloak/conf/keycloak.conf"
if [ -f "$KEYCLOAK_CONF_FILE" ]; then
    echo -e "${YELLOW}Updating Keycloak proxy configuration...${NC}"

    # Backup original if not already backed up
    if [ ! -f "$KEYCLOAK_CONF_FILE.bak" ]; then
        cp "$KEYCLOAK_CONF_FILE" "$KEYCLOAK_CONF_FILE.bak"
        echo -e "${BLUE}  Backup created at $KEYCLOAK_CONF_FILE.bak${NC}"
    fi

    # Update Keycloak config with proxy settings
    cat > "$KEYCLOAK_CONF_FILE" << 'KEYCLOAK_EOF'
# HiveMatrix Keycloak Configuration
# Auto-generated by HiveMatrix Helm

# Hostname Configuration (Keycloak v2 settings)
hostname-url=https://localhost/keycloak
hostname-admin-url=http://localhost:8080
hostname-strict=false
hostname-strict-backchannel=false

# Proxy headers
proxy-headers=xforwarded

# Do not attach route to cookies
spi-sticky-session-encoder-infinispan-should-attach-route=false

# HTTP Configuration
http-enabled=true
KEYCLOAK_EOF
    echo -e "${GREEN}✓ Keycloak configured for proxy mode${NC}"
    echo -e "${YELLOW}Note: Keycloak needs to be restarted for these changes to take effect${NC}"
else
    echo -e "${RED}✗ Keycloak config file not found at $KEYCLOAK_CONF_FILE${NC}"
    echo -e "${YELLOW}Continuing with realm configuration...${NC}"
fi

echo ""

# HiveMatrix user to create
HIVEMATRIX_USER="admin"
HIVEMATRIX_PASS="admin"
HIVEMATRIX_EMAIL="admin@hivematrix.local"

echo ""
echo "================================================================"
echo "  HiveMatrix Keycloak Configuration"
echo "================================================================"
echo ""

# Get admin access token
echo "Authenticating with Keycloak..."
TOKEN_RESPONSE=$(curl -s -X POST "$KEYCLOAK_URL/realms/master/protocol/openid-connect/token" \
  -H "Content-Type: application/x-www-form-urlencoded" \
  -d "username=$ADMIN_USER" \
  -d "password=$ADMIN_PASS" \
  -d "grant_type=password" \
  -d "client_id=admin-cli")

ACCESS_TOKEN=$(echo $TOKEN_RESPONSE | grep -o '"access_token":"[^"]*' | cut -d'"' -f4)

if [ -z "$ACCESS_TOKEN" ]; then
    echo -e "${RED}✗ Failed to authenticate with Keycloak${NC}"
    echo "Make sure Keycloak is running and admin credentials are correct"
    exit 1
fi

echo -e "${GREEN}✓ Authenticated${NC}"

# Create hivematrix realm
echo ""
echo "Creating hivematrix realm..."
REALM_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" -X GET "$KEYCLOAK_URL/admin/realms/hivematrix" \
  -H "Authorization: Bearer $ACCESS_TOKEN")

if [ "$REALM_EXISTS" = "200" ]; then
    echo -e "${BLUE}  Realm already exists${NC}"
else
    curl -s -X POST "$KEYCLOAK_URL/admin/realms" \
      -H "Authorization: Bearer $ACCESS_TOKEN" \
      -H "Content-Type: application/json" \
      -d '{
        "realm": "hivematrix",
        "enabled": true,
        "displayName": "HiveMatrix",
        "loginTheme": "keycloak"
      }'
    echo -e "${GREEN}✓ Realm created${NC}"
fi

# Create core-client
echo ""
echo "Creating core-client..."
CLIENT_EXISTS=$(curl -s -X GET "$KEYCLOAK_URL/admin/realms/hivematrix/clients?clientId=core-client" \
  -H "Authorization: Bearer $ACCESS_TOKEN" | grep -o "core-client" || true)

if [ -n "$CLIENT_EXISTS" ]; then
    echo -e "${BLUE}  Client already exists, updating configuration...${NC}"
    # Get client ID to update it
    EXISTING_CLIENT_ID=$(curl -s -X GET "$KEYCLOAK_URL/admin/realms/hivematrix/clients?clientId=core-client" \
      -H "Authorization: Bearer $ACCESS_TOKEN" | grep -o '"id":"[^"]*' | head -1 | cut -d'"' -f4)

    # Update the client with logout redirect URIs
    curl -s -X PUT "$KEYCLOAK_URL/admin/realms/hivematrix/clients/$EXISTING_CLIENT_ID" \
      -H "Authorization: Bearer $ACCESS_TOKEN" \
      -H "Content-Type: application/json" \
      -d '{
        "clientId": "core-client",
        "name": "HiveMatrix Core Service",
        "enabled": true,
        "protocol": "openid-connect",
        "publicClient": false,
        "standardFlowEnabled": true,
        "directAccessGrantsEnabled": false,
        "redirectUris": ["http://127.0.0.1:5000/auth", "http://localhost:5000/auth", "http://127.0.0.1:5000/logout-callback", "http://localhost:5000/logout-callback", "http://127.0.0.1:5000/*", "http://localhost:5000/*", "https://localhost/keycloak-callback", "https://127.0.0.1/keycloak-callback", "https://localhost/*", "https://127.0.0.1/*"],
        "webOrigins": ["+"],
        "attributes": {
          "post.logout.redirect.uris": "+"
        }
      }'
    echo -e "${GREEN}✓ Client updated${NC}"
else
    curl -s -X POST "$KEYCLOAK_URL/admin/realms/hivematrix/clients" \
      -H "Authorization: Bearer $ACCESS_TOKEN" \
      -H "Content-Type: application/json" \
      -d '{
        "clientId": "core-client",
        "name": "HiveMatrix Core Service",
        "enabled": true,
        "protocol": "openid-connect",
        "publicClient": false,
        "standardFlowEnabled": true,
        "directAccessGrantsEnabled": false,
        "redirectUris": ["http://127.0.0.1:5000/auth", "http://localhost:5000/auth", "http://127.0.0.1:5000/logout-callback", "http://localhost:5000/logout-callback", "http://127.0.0.1:5000/*", "http://localhost:5000/*", "https://localhost/keycloak-callback", "https://127.0.0.1/keycloak-callback", "https://localhost/*", "https://127.0.0.1/*"],
        "webOrigins": ["+"],
        "attributes": {
          "post.logout.redirect.uris": "+"
        }
      }'
    echo -e "${GREEN}✓ Client created${NC}"
fi

# Get client secret
echo ""
echo "Retrieving client secret..."
CLIENT_ID=$(curl -s -X GET "$KEYCLOAK_URL/admin/realms/hivematrix/clients?clientId=core-client" \
  -H "Authorization: Bearer $ACCESS_TOKEN" | grep -o '"id":"[^"]*' | head -1 | cut -d'"' -f4)

CLIENT_SECRET=$(curl -s -X GET "$KEYCLOAK_URL/admin/realms/hivematrix/clients/$CLIENT_ID/client-secret" \
  -H "Authorization: Bearer $ACCESS_TOKEN" | grep -o '"value":"[^"]*' | cut -d'"' -f4)

echo -e "${GREEN}✓ Client secret: $CLIENT_SECRET${NC}"

# Update master config with client secret
echo ""
echo "Updating master configuration..."
MASTER_CONFIG="instance/configs/master_config.json"

if [ -f "$MASTER_CONFIG" ]; then
    # Use python to update JSON properly
    python3 <<EOF
import json
with open('$MASTER_CONFIG', 'r') as f:
    config = json.load(f)
config['keycloak']['client_secret'] = '$CLIENT_SECRET'
with open('$MASTER_CONFIG', 'w') as f:
    json.dump(config, f, indent=2)
EOF
    echo -e "${GREEN}✓ Master config updated${NC}"

    # Regenerate .flaskenv files for all apps
    source pyenv/bin/activate
    python config_manager.py write-dotenv core 2>/dev/null || true
    python config_manager.py write-dotenv nexus 2>/dev/null || true
    echo -e "${GREEN}✓ Service configs regenerated${NC}"
else
    echo -e "${YELLOW}⚠ Master config not found at $MASTER_CONFIG${NC}"
fi

# Create permission groups
echo ""
echo "Creating permission groups..."

# Create admins group
GROUP_EXISTS=$(curl -s -X GET "$KEYCLOAK_URL/admin/realms/hivematrix/groups?search=admins" \
  -H "Authorization: Bearer $ACCESS_TOKEN" | grep -o "admins" || true)

if [ -n "$GROUP_EXISTS" ]; then
    echo -e "${BLUE}  admins group already exists${NC}"
else
    curl -s -X POST "$KEYCLOAK_URL/admin/realms/hivematrix/groups" \
      -H "Authorization: Bearer $ACCESS_TOKEN" \
      -H "Content-Type: application/json" \
      -d '{"name": "admins"}'
    echo -e "${GREEN}✓ admins group created${NC}"
fi

# Create technicians group
GROUP_EXISTS=$(curl -s -X GET "$KEYCLOAK_URL/admin/realms/hivematrix/groups?search=technicians" \
  -H "Authorization: Bearer $ACCESS_TOKEN" | grep -o "technicians" || true)

if [ -n "$GROUP_EXISTS" ]; then
    echo -e "${BLUE}  technicians group already exists${NC}"
else
    curl -s -X POST "$KEYCLOAK_URL/admin/realms/hivematrix/groups" \
      -H "Authorization: Bearer $ACCESS_TOKEN" \
      -H "Content-Type: application/json" \
      -d '{"name": "technicians"}'
    echo -e "${GREEN}✓ technicians group created${NC}"
fi

# Create billing group
GROUP_EXISTS=$(curl -s -X GET "$KEYCLOAK_URL/admin/realms/hivematrix/groups?search=billing" \
  -H "Authorization: Bearer $ACCESS_TOKEN" | grep -o "billing" || true)

if [ -n "$GROUP_EXISTS" ]; then
    echo -e "${BLUE}  billing group already exists${NC}"
else
    curl -s -X POST "$KEYCLOAK_URL/admin/realms/hivematrix/groups" \
      -H "Authorization: Bearer $ACCESS_TOKEN" \
      -H "Content-Type: application/json" \
      -d '{"name": "billing"}'
    echo -e "${GREEN}✓ billing group created${NC}"
fi

# Create client group
GROUP_EXISTS=$(curl -s -X GET "$KEYCLOAK_URL/admin/realms/hivematrix/groups?search=client" \
  -H "Authorization: Bearer $ACCESS_TOKEN" | grep -o "\"name\":\"client\"" || true)

if [ -n "$GROUP_EXISTS" ]; then
    echo -e "${BLUE}  client group already exists${NC}"
else
    curl -s -X POST "$KEYCLOAK_URL/admin/realms/hivematrix/groups" \
      -H "Authorization: Bearer $ACCESS_TOKEN" \
      -H "Content-Type: application/json" \
      -d '{"name": "client"}'
    echo -e "${GREEN}✓ client group created${NC}"
fi

# Get admins group ID for adding user
GROUP_ID=$(curl -s -X GET "$KEYCLOAK_URL/admin/realms/hivematrix/groups?search=admins" \
  -H "Authorization: Bearer $ACCESS_TOKEN" | grep -o '"id":"[^"]*' | head -1 | cut -d'"' -f4)

# Add group mapper to client
echo ""
echo "Configuring group mapper..."
MAPPER_EXISTS=$(curl -s -X GET "$KEYCLOAK_URL/admin/realms/hivematrix/clients/$CLIENT_ID/protocol-mappers/models" \
  -H "Authorization: Bearer $ACCESS_TOKEN" | grep -o '"name":"groups"' || true)

if [ -n "$MAPPER_EXISTS" ]; then
    echo -e "${BLUE}  Mapper already exists${NC}"
else
    curl -s -X POST "$KEYCLOAK_URL/admin/realms/hivematrix/clients/$CLIENT_ID/protocol-mappers/models" \
      -H "Authorization: Bearer $ACCESS_TOKEN" \
      -H "Content-Type: application/json" \
      -d '{
        "name": "groups",
        "protocol": "openid-connect",
        "protocolMapper": "oidc-group-membership-mapper",
        "config": {
          "full.path": "false",
          "id.token.claim": "true",
          "access.token.claim": "true",
          "claim.name": "groups",
          "userinfo.token.claim": "true"
        }
      }'
    echo -e "${GREEN}✓ Mapper configured${NC}"
fi

# Create HiveMatrix admin user
echo ""
echo "Creating HiveMatrix admin user..."
USER_EXISTS=$(curl -s -X GET "$KEYCLOAK_URL/admin/realms/hivematrix/users?username=$HIVEMATRIX_USER" \
  -H "Authorization: Bearer $ACCESS_TOKEN" | grep -o "\"username\":\"$HIVEMATRIX_USER\"" || true)

if [ -n "$USER_EXISTS" ]; then
    echo -e "${BLUE}  User already exists${NC}"
    USER_ID=$(curl -s -X GET "$KEYCLOAK_URL/admin/realms/hivematrix/users?username=$HIVEMATRIX_USER" \
      -H "Authorization: Bearer $ACCESS_TOKEN" | grep -o '"id":"[^"]*' | head -1 | cut -d'"' -f4)
else
    curl -s -X POST "$KEYCLOAK_URL/admin/realms/hivematrix/users" \
      -H "Authorization: Bearer $ACCESS_TOKEN" \
      -H "Content-Type: application/json" \
      -d "{
        \"username\": \"$HIVEMATRIX_USER\",
        \"email\": \"$HIVEMATRIX_EMAIL\",
        \"enabled\": true,
        \"emailVerified\": true
      }"

    USER_ID=$(curl -s -X GET "$KEYCLOAK_URL/admin/realms/hivematrix/users?username=$HIVEMATRIX_USER" \
      -H "Authorization: Bearer $ACCESS_TOKEN" | grep -o '"id":"[^"]*' | head -1 | cut -d'"' -f4)

    echo -e "${GREEN}✓ User created${NC}"
fi

# Set user password
echo ""
echo "Setting user password..."
curl -s -X PUT "$KEYCLOAK_URL/admin/realms/hivematrix/users/$USER_ID/reset-password" \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  -H "Content-Type: application/json" \
  -d "{
    \"type\": \"password\",
    \"value\": \"$HIVEMATRIX_PASS\",
    \"temporary\": false
  }"
echo -e "${GREEN}✓ Password set${NC}"

# Add user to admins group
echo ""
echo "Adding user to admins group..."
curl -s -X PUT "$KEYCLOAK_URL/admin/realms/hivematrix/users/$USER_ID/groups/$GROUP_ID" \
  -H "Authorization: Bearer $ACCESS_TOKEN"
echo -e "${GREEN}✓ User added to admins group${NC}"

echo ""
echo "================================================================"
echo -e "${GREEN}  Keycloak Configuration Complete!${NC}"
echo "================================================================"
echo ""
echo "HiveMatrix Realm: hivematrix"
echo "Admin User:"
echo "  Username: $HIVEMATRIX_USER"
echo "  Password: $HIVEMATRIX_PASS"
echo "  Email: $HIVEMATRIX_EMAIL"
echo ""
echo "Client Secret (saved to Core .flaskenv):"
echo "  $CLIENT_SECRET"
echo ""
echo "Next step:"
echo "  Run: ./start.sh"
echo ""
echo "This will start all HiveMatrix services and you can login at:"
echo "  http://localhost:8000"
echo "  Username: $HIVEMATRIX_USER"
echo "  Password: $HIVEMATRIX_PASS"
echo ""
echo "================================================================"
echo ""
